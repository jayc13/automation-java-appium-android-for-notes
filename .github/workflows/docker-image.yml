name: Docker Image CI

on:
  workflow_dispatch: # To trigger manual build
  pull_request:
    branches:
    - main
  push:
    branches:
    - main

jobs:
  build:
    name: "Build & Push Docker Image"
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.get-app-version.outputs.APP_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Get app version
        id: get-app-version
        run: |
          echo "APP_VERSION=$(./gradlew -q printVersionName)" >> $GITHUB_OUTPUT
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2
      - name: Build and push - Version
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/automation-java-appium-notes:${{steps.get-app-version.outputs.APP_VERSION}}
      - name: Build and push - Latest
        uses: docker/build-push-action@v3
        if: github.event_name == 'push'
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/automation-java-appium-notes:latest
  test-preparation:
    name: Test Preparation
    runs-on: ubuntu-latest
    needs: build
    outputs:
      APP_PATH: ${{ steps.bs-apk-upload.outputs.APP_PATH }}
      APP_VERSION: ${{ needs.build.outputs.APP_VERSION }}
    steps:
      - name: Download APK file
        uses: robinraju/release-downloader@v1.7
        with:
          repository: "jayc13/android-notes-app-for-automation"
          latest: true
          fileName: "Notes.apk"
      - name: Upload APK to BrowserStack
        id: bs-apk-upload
        env:
          BROWSERSTACK_USERNAME: '${{ secrets.BROWSERSTACK_USERNAME }}'
          BROWSERSTACK_ACCESS_KEY: '${{ secrets.BROWSERSTACK_ACCESS_KEY }}'
        run: |
          BS_PATH=$(curl -s -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@Notes.apk" | jq .app_url)
          echo "APP_PATH=$BS_PATH" >> $GITHUB_OUTPUT
  test:
    runs-on: ubuntu-latest
    needs: test-preparation
    outputs:
      APP_VERSION: ${{ needs.test-preparation.outputs.APP_VERSION }}
    strategy:
      matrix:
        include:
          - device-name: "Google Pixel 7"
            platform-version: "13.0"
          - device-name: "Samsung Galaxy S21"
            platform-version: "12.0"
    name: Run Tests - Browserstack - Android ${{ matrix.platform-version }}
    container:
      image: caballerojavier13/automation-java-appium-notes:${{ needs.test-preparation.outputs.TEST_IMAGE_VERSION }}
      env:
        APP_VERSION: ${{ needs.test-preparation.outputs.APP_VERSION }}
        APP_PATH: ${{ needs.test-preparation.outputs.APP_PATH }}
        RUN_ON_BROWSERSTACK: 'TRUE'
        DEVICE_NAME: ${{ matrix.device-name }}
        PLATFORM_VERSION: ${{ matrix.platform-version }}
        BROWSERSTACK_USERNAME: '${{ secrets.BROWSERSTACK_USERNAME }}'
        BROWSERSTACK_ACCESS_KEY: '${{ secrets.BROWSERSTACK_ACCESS_KEY }}'
        BROWSERSTACK_BUILD_NAME: '${{ needs.test-preparation.outputs.APP_VERSION }}'
        BROWSERSTACK_PROJECT_NAME: 'Notes App GitHub Actions'
    steps:
      - name: Test execution
        run: |
          cd /project
          gradle test --no-daemon
      - name: Upload report
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: test-build-${{ matrix.platform-version }}
          path: /project/build/test-results
  report:
      strategy:
        matrix:
          include:
            - platform-version: "13.0"
            - platform-version: "12.0"
      name: Process Report - Android ${{ matrix.platform-version }}
      runs-on: ubuntu-latest
      needs: test
      if: always()
      steps:
        - uses: actions/checkout@v3
        - name: Restore cached report
          uses: actions/download-artifact@master
          if: always()
          with:
            name: test-build-${{ matrix.platform-version }}
            path: ./test-results-${{ matrix.platform-version }}
        - name: Publish Report
          uses: dorny/test-reporter@v1
          if: always()
          with:
            name: Report - Android ${{ matrix.platform-version }}
            path: ./test-results-${{ matrix.platform-version }}/test/TEST-*.xml    # Path to test results
            reporter: java-junit        # Format of test results
            fail-on-error: false
  release-creation:
    name: Release Creation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: write
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Recreate Release
        uses: ncipollo/release-action@v1
        with:
          tag: '${{ needs.test.outputs.APP_VERSION }}'
          draft: false
          allowUpdates: true
          prerelease: false
          makeLatest: true
